{
  "Variabel": "Variabel adalah tempat menyimpan data. Penulisan variabel di Python tidak perlu tipe data. Contoh:\n\nx = 10\ny = 'Halo'\nz = 3.14\n\nVariabel dapat diubah nilainya kapan saja.",
  "Integer": "Integer adalah tipe data bilangan bulat, misal: 1, -5, 100. Contoh:\n\nangka = 7\nprint(type(angka)) # Output: <class 'int'>",
  "Float": "Float adalah tipe data bilangan desimal. Contoh:\n\npi = 3.14\nprint(type(pi)) # Output: <class 'float'>",
  "String": "String adalah tipe data teks. Tulis di antara tanda kutip. Contoh:\n\nnama = 'Fadhil'\nprint(type(nama)) # Output: <class 'str'>",
  "Boolean": "Boolean hanya punya dua nilai: True atau False. Contoh:\n\nstatus = True\nprint(type(status)) # Output: <class 'bool'>\n\nBoolean sering dipakai dalam kondisi dan perbandingan.",
  "List": "List adalah kumpulan data berurutan dan dapat diubah. Contoh:\n\nangka = [1, 2, 3, 4]\nnama = ['Ani', 'Budi']\nprint(angka[0]) # Output: 1\n\nList bisa ditambah, dihapus, dan diakses elemennya.",
  "Tuple": "Tuple mirip list, tapi tidak bisa diubah (immutable). Contoh:\n\ndata = (1, 2, 3)\nprint(data[1]) # Output: 2",
  "Dictionary": "Dictionary (dict) menyimpan pasangan key-value. Contoh:\n\nmahasiswa = {'nama':'Dewi', 'umur':20}\nprint(mahasiswa['nama']) # Output: Dewi",
  "Set": "Set adalah kumpulan data unik (tidak ada duplikasi). Contoh:\n\nangka = {1, 2, 3, 2}\nprint(angka) # Output: {1, 2, 3}",
  "Fungsi": "Fungsi adalah blok kode yang bisa dipanggil berulang kali. Contoh:\n\ndef sapa(nama):\n    print('Halo,', nama)\n\nsapa('Budi') # Output: Halo, Budi",
  "Fungsi dengan Return": "Fungsi bisa mengembalikan nilai dengan return.\n\ndef tambah(a, b):\n    return a + b\n\nhasil = tambah(3,4)\nprint(hasil) # Output: 7",
  "Lambda": "Fungsi anonim, biasanya untuk operasi singkat.\n\ndouble = lambda x: x * 2\nprint(double(4)) # Output: 8",
  "Docstring": "Komentar khusus di awal fungsi/class/module untuk dokumentasi.\n\ndef foo():\n    \"\"\"Ini docstring fungsi foo.\"\"\"\n    pass",
  "Global dan Local Variable": "Variabel di luar fungsi = global. Di dalam fungsi = local.\n\na = 5\n\ndef tampil():\n    a = 10\n    print(a) # 10\n\ntampil()\nprint(a) # 5",
  "Input": "Untuk mengambil input dari user, gunakan input().\n\nnama = input('Masukkan nama: ')\nprint('Halo', nama)",
  "Output": "Untuk menampilkan hasil, gunakan print().\n\nprint('Belajar Python itu mudah!')",
  "If Statement": "If digunakan untuk percabangan:\n\nnilai = 80\nif nilai >= 75:\n    print('Lulus')\nelse:\n    print('Tidak lulus')",
  "For Loop": "For digunakan untuk mengulang sesuatu.\n\nfor i in range(5):\n    print(i)\n# Output: 0 1 2 3 4",
  "While Loop": "While digunakan selama kondisi True.\n\ni = 0\nwhile i < 3:\n    print(i)\n    i += 1",
  "Break dan Continue": "break: keluar dari loop.\ncontinue: lanjut ke iterasi berikutnya.\n\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)\n# Output: 0 1 2\n\nfor i in range(5):\n    if i == 3:\n        continue\n    print(i)\n# Output: 0 1 2 4",
  "List Comprehension": "Membuat list dengan sintaks singkat.\n\nangka = [x**2 for x in range(5)]\nprint(angka) # Output: [0, 1, 4, 9, 16]",
  "Operasi Aritmatika": "Python mendukung operasi matematika dasar:\n+ (tambah), - (kurang), * (kali), / (bagi), // (bagi bulat), % (modulo), ** (pangkat).\n\nContoh:\na = 5\nb = 2\nprint(a + b) # Output: 7\nprint(a ** b) # Output: 25",
  "Perbandingan": "Operator perbandingan: ==, !=, >, <, >=, <=\n\nContoh:\nprint(5 > 2) # Output: True\nprint(5 == 5) # Output: True",
  "Logika Boolean": "Operator logika: and, or, not\n\nContoh:\nx = True\ny = False\nprint(x and y) # Output: False\nprint(not x) # Output: False",
  "Exception Handling": "Try-except untuk menangani error:\n\ntry:\n    x = 10 / 0\nexcept ZeroDivisionError:\n    print('Tidak bisa bagi nol!')\nfinally:\n    print('Selesai')",
  "Import": "Menggunakan library/modul lain:\n\nimport math\nfrom datetime import datetime\n\nprint(math.pi)\nprint(datetime.now())",
  "Class": "Class adalah blueprint untuk membuat objek:\n\nclass Mobil:\n    def __init__(self, merk):\n        self.merk = merk\n    \n    def klakson(self):\n        print('Beep beep!')\n\navanza = Mobil('Toyota')\navanza.klakson()",
  "Inheritance": "Class bisa mewarisi dari class lain:\n\nclass Kendaraan:\n    def __init__(self, roda):\n        self.roda = roda\n\nclass Mobil(Kendaraan):\n    def __init__(self):\n        super().__init__(4)\n\nmobil = Mobil()\nprint(mobil.roda) # Output: 4",
  "File Handling": "Membaca dan menulis file:\n\n# Menulis file\nwith open('data.txt', 'w') as f:\n    f.write('Hello Python!')\n\n# Membaca file\nwith open('data.txt', 'r') as f:\n    content = f.read()\n    print(content)",
  "JSON": "Bekerja dengan format JSON:\n\nimport json\n\ndata = {'nama': 'Budi', 'umur': 25}\njson_string = json.dumps(data)\nprint(json_string)\n\nparsed = json.loads(json_string)\nprint(parsed['nama'])",
  "Regular Expressions": "Pattern matching dengan regex:\n\nimport re\n\ntext = 'Email: user@example.com'\npattern = r'\\w+@\\w+\\.\\w+'\nmatch = re.search(pattern, text)\nif match:\n    print('Email found:', match.group())",
  "Datetime": "Bekerja dengan tanggal dan waktu:\n\nfrom datetime import datetime, timedelta\n\nnow = datetime.now()\nprint('Sekarang:', now)\ntomorrow = now + timedelta(days=1)\nprint('Besok:', tomorrow)",
  "Random": "Generate angka/pilihan acak:\n\nimport random\n\n# Angka acak\nangka = random.randint(1, 10)\nprint(angka)\n\n# Pilih acak dari list\nwarna = random.choice(['merah', 'biru', 'hijau'])\nprint(warna)",
  "Os Module": "Interaksi dengan sistem operasi:\n\nimport os\n\n# Path saat ini\nprint(os.getcwd())\n\n# List file dalam folder\nprint(os.listdir('.'))\n\n# Environment variables\nprint(os.getenv('HOME'))",
  "Math Module": "Fungsi matematika lanjutan:\n\nimport math\n\nprint(math.sqrt(16)) # Output: 4.0\nprint(math.ceil(4.2)) # Output: 5\nprint(math.floor(4.8)) # Output: 4\nprint(math.pi) # Output: 3.14159...",
  "Collections": "Data structures khusus:\n\nfrom collections import Counter, defaultdict\n\n# Counter\ndata = ['a', 'b', 'a', 'c', 'b', 'a']\ncounter = Counter(data)\nprint(counter) # Counter({'a': 3, 'b': 2, 'c': 1})\n\n# defaultdict\ndd = defaultdict(list)\ndd['key'].append('value')",
  "Itertools": "Tools untuk iterasi efisien:\n\nimport itertools\n\n# Kombinasi\ndata = [1, 2, 3]\ncombinations = list(itertools.combinations(data, 2))\nprint(combinations) # [(1, 2), (1, 3), (2, 3)]",
  "Decorators": "Function yang memodifikasi function lain:\n\ndef timer(func):\n    import time\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        print(f'Waktu: {time.time() - start:.2f}s')\n        return result\n    return wrapper\n\n@timer\ndef slow_function():\n    time.sleep(1)\n    return 'Done'",
  "Generators": "Function yang menghasilkan nilai secara lazy:\n\ndef fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci()\nfor _ in range(5):\n    print(next(fib)) # 0, 1, 1, 2, 3",
  "Context Managers": "Mengelola resources dengan 'with':\n\nclass DatabaseConnection:\n    def __enter__(self):\n        print('Connecting to database')\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Closing connection')\n\nwith DatabaseConnection() as db:\n    print('Using database')",
  "Threading": "Menjalankan code secara paralel:\n\nimport threading\nimport time\n\ndef worker(name):\n    for i in range(3):\n        print(f'{name}: {i}')\n        time.sleep(1)\n\nt1 = threading.Thread(target=worker, args=('Thread-1',))\nt2 = threading.Thread(target=worker, args=('Thread-2',))\n\nt1.start()\nt2.start()",
  "Requests": "HTTP requests untuk API:\n\nimport requests\n\nresponse = requests.get('https://api.github.com/users/octocat')\nif response.status_code == 200:\n    data = response.json()\n    print(data['name'])\nelse:\n    print('Error:', response.status_code)",
  "Virtual Environment": "Mengisolasi dependencies project:\n\n# Terminal commands:\n# python -m venv myenv\n# source myenv/bin/activate  # Linux/Mac\n# myenv\\Scripts\\activate     # Windows\n# pip install package_name\n# deactivate",
  "Package Management": "Mengelola library dengan pip:\n\n# Install package\n# pip install requests\n\n# Install dari requirements.txt\n# pip install -r requirements.txt\n\n# List installed packages\n# pip list\n\n# Uninstall package\n# pip uninstall requests",
  "F-strings": "Format string modern (Python 3.6+):\n\nnama = 'Budi'\numur = 25\npesan = f'Halo {nama}, umur {umur} tahun'\nprint(pesan)\n\n# Dengan format\nharga = 15000\nprint(f'Harga: Rp {harga:,}')\n\n# Dengan expression\nprint(f'2 + 3 = {2 + 3}')",
  "Type Hints": "Petunjuk tipe data (Python 3.5+):\n\ndef tambah(a: int, b: int) -> int:\n    return a + b\n\ndef sapa(nama: str) -> None:\n    print(f'Halo {nama}')\n\nfrom typing import List, Dict\n\ndef proses_data(items: List[str]) -> Dict[str, int]:\n    return {item: len(item) for item in items}",
  "Pathlib": "Bekerja dengan path file modern:\n\nfrom pathlib import Path\n\n# Current directory\ncurrent = Path.cwd()\nprint(current)\n\n# Create path\nfile_path = Path('data/file.txt')\nprint(file_path.exists())\n\n# Read file\nif file_path.exists():\n    content = file_path.read_text()\n    print(content)",
  "Dataclasses": "Class dengan less boilerplate (Python 3.7+):\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    email: str = ''\n    \n    def greet(self):\n        return f'Hi, I am {self.name}'\n\nperson = Person('Alice', 30)\nprint(person.greet())",
  "Asyncio": "Asynchronous programming:\n\nimport asyncio\n\nasync def fetch_data(name):\n    print(f'Fetching {name}...')\n    await asyncio.sleep(2)\n    return f'Data for {name}'\n\nasync def main():\n    tasks = [fetch_data('A'), fetch_data('B')]\n    results = await asyncio.gather(*tasks)\n    print(results)\n\n# asyncio.run(main())",
  "Comprehensions Advanced": "List, dict, set comprehensions lanjutan:\n\n# Nested list comprehension\nmatrix = [[1,2,3], [4,5,6], [7,8,9]]\nflat = [x for row in matrix for x in row]\nprint(flat) # [1,2,3,4,5,6,7,8,9]\n\n# Dict comprehension dengan kondisi\ndata = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfiltered = {k: v for k, v in data.items() if v % 2 == 0}\nprint(filtered) # {'b': 2, 'd': 4}",
  "Enumerate dan Zip": "Iterasi dengan index dan multiple sequences:\n\n# Enumerate untuk index\nfruits = ['apple', 'banana', 'orange']\nfor i, fruit in enumerate(fruits):\n    print(f'{i}: {fruit}')\n\n# Zip untuk multiple lists\nnames = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(f'{name} is {age} years old')",
  "Map Filter Reduce": "Functional programming tools:\n\nfrom functools import reduce\n\n# Map - transform setiap element\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared) # [1, 4, 9, 16, 25]\n\n# Filter - filter elements\neven = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even) # [2, 4]\n\n# Reduce - aggregate\nsum_all = reduce(lambda x, y: x + y, numbers)\nprint(sum_all) # 15"
}